// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/taylankasap/message-sender/some_third_party (interfaces: ClientWithResponsesInterface)
//
// Generated by this command:
//
//	mockgen --package=somethirdparty --destination=gen_mock.go . ClientWithResponsesInterface
//

// Package somethirdparty is a generated GoMock package.
package somethirdparty

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// SendMessageWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SendMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessageWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*SendMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageWithBodyWithResponse indicates an expected call of SendMessageWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SendMessageWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SendMessageWithBodyWithResponse), varargs...)
}

// SendMessageWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SendMessageWithResponse(ctx context.Context, body SendMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*SendMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessageWithResponse", varargs...)
	ret0, _ := ret[0].(*SendMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageWithResponse indicates an expected call of SendMessageWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SendMessageWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SendMessageWithResponse), varargs...)
}
