// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/taylankasap/message-sender (interfaces: DBInterface)
//
// Generated by this command:
//
//	mockgen --package=main --destination=mock_db_interface.go . DBInterface
//

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"
	time "time"

	api "github.com/taylankasap/message-sender/api"
	gomock "go.uber.org/mock/gomock"
)

// MockDBInterface is a mock of DBInterface interface.
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
	isgomock struct{}
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface.
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance.
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// GetSentMessages mocks base method.
func (m *MockDBInterface) GetSentMessages() ([]api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentMessages")
	ret0, _ := ret[0].([]api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentMessages indicates an expected call of GetSentMessages.
func (mr *MockDBInterfaceMockRecorder) GetSentMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentMessages", reflect.TypeOf((*MockDBInterface)(nil).GetSentMessages))
}

// GetUnsentMessages mocks base method.
func (m *MockDBInterface) GetUnsentMessages(limit int) ([]api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsentMessages", limit)
	ret0, _ := ret[0].([]api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsentMessages indicates an expected call of GetUnsentMessages.
func (mr *MockDBInterfaceMockRecorder) GetUnsentMessages(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsentMessages", reflect.TypeOf((*MockDBInterface)(nil).GetUnsentMessages), limit)
}

// MarkMessageAsInvalid mocks base method.
func (m *MockDBInterface) MarkMessageAsInvalid(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMessageAsInvalid", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMessageAsInvalid indicates an expected call of MarkMessageAsInvalid.
func (mr *MockDBInterfaceMockRecorder) MarkMessageAsInvalid(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessageAsInvalid", reflect.TypeOf((*MockDBInterface)(nil).MarkMessageAsInvalid), id)
}

// MarkMessageAsSent mocks base method.
func (m *MockDBInterface) MarkMessageAsSent(id int, sentAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMessageAsSent", id, sentAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMessageAsSent indicates an expected call of MarkMessageAsSent.
func (mr *MockDBInterfaceMockRecorder) MarkMessageAsSent(id, sentAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessageAsSent", reflect.TypeOf((*MockDBInterface)(nil).MarkMessageAsSent), id, sentAt)
}
